// Code generated by protoc-gen-go. DO NOT EDIT.
// source: soushin/spring5-kotlin-application/task/task.proto

/*
Package task is a generated protocol buffer package.

It is generated from these files:
	soushin/spring5-kotlin-application/task/task.proto

It has these top-level messages:
	GetTaskInbound
	FindTaskInbound
	CreateTaskInbound
	UpdateTaskInbound
	TaskOutbound
*/
package task

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf2 "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetTaskInbound struct {
	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
}

func (m *GetTaskInbound) Reset()                    { *m = GetTaskInbound{} }
func (m *GetTaskInbound) String() string            { return proto.CompactTextString(m) }
func (*GetTaskInbound) ProtoMessage()               {}
func (*GetTaskInbound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetTaskInbound) GetTaskId() uint32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

type FindTaskInbound struct {
	Page *google_protobuf2.UInt32Value `protobuf:"bytes,1,opt,name=page" json:"page,omitempty"`
}

func (m *FindTaskInbound) Reset()                    { *m = FindTaskInbound{} }
func (m *FindTaskInbound) String() string            { return proto.CompactTextString(m) }
func (*FindTaskInbound) ProtoMessage()               {}
func (*FindTaskInbound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FindTaskInbound) GetPage() *google_protobuf2.UInt32Value {
	if m != nil {
		return m.Page
	}
	return nil
}

type CreateTaskInbound struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *CreateTaskInbound) Reset()                    { *m = CreateTaskInbound{} }
func (m *CreateTaskInbound) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskInbound) ProtoMessage()               {}
func (*CreateTaskInbound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateTaskInbound) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type UpdateTaskInbound struct {
	TaskId uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *UpdateTaskInbound) Reset()                    { *m = UpdateTaskInbound{} }
func (m *UpdateTaskInbound) String() string            { return proto.CompactTextString(m) }
func (*UpdateTaskInbound) ProtoMessage()               {}
func (*UpdateTaskInbound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateTaskInbound) GetTaskId() uint32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *UpdateTaskInbound) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type TaskOutbound struct {
	TaskId     uint32                      `protobuf:"varint,1,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Title      string                      `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	FinishedAt *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=finishedAt" json:"finishedAt,omitempty"`
	CreatedAt  *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=createdAt" json:"createdAt,omitempty"`
	UpdatedAt  *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=updatedAt" json:"updatedAt,omitempty"`
}

func (m *TaskOutbound) Reset()                    { *m = TaskOutbound{} }
func (m *TaskOutbound) String() string            { return proto.CompactTextString(m) }
func (*TaskOutbound) ProtoMessage()               {}
func (*TaskOutbound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TaskOutbound) GetTaskId() uint32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *TaskOutbound) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TaskOutbound) GetFinishedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.FinishedAt
	}
	return nil
}

func (m *TaskOutbound) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TaskOutbound) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*GetTaskInbound)(nil), "messages.GetTaskInbound")
	proto.RegisterType((*FindTaskInbound)(nil), "messages.FindTaskInbound")
	proto.RegisterType((*CreateTaskInbound)(nil), "messages.CreateTaskInbound")
	proto.RegisterType((*UpdateTaskInbound)(nil), "messages.UpdateTaskInbound")
	proto.RegisterType((*TaskOutbound)(nil), "messages.TaskOutbound")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskService service

type TaskServiceClient interface {
	GetTaskService(ctx context.Context, in *GetTaskInbound, opts ...grpc.CallOption) (*TaskOutbound, error)
	FindTaskService(ctx context.Context, in *FindTaskInbound, opts ...grpc.CallOption) (TaskService_FindTaskServiceClient, error)
	CreateTaskService(ctx context.Context, in *CreateTaskInbound, opts ...grpc.CallOption) (*TaskOutbound, error)
	UpdateTaskService(ctx context.Context, in *UpdateTaskInbound, opts ...grpc.CallOption) (*TaskOutbound, error)
	DeleteTaskService(ctx context.Context, in *GetTaskInbound, opts ...grpc.CallOption) (*TaskOutbound, error)
	FinishTaskService(ctx context.Context, in *GetTaskInbound, opts ...grpc.CallOption) (*TaskOutbound, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetTaskService(ctx context.Context, in *GetTaskInbound, opts ...grpc.CallOption) (*TaskOutbound, error) {
	out := new(TaskOutbound)
	err := grpc.Invoke(ctx, "/messages.TaskService/GetTaskService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FindTaskService(ctx context.Context, in *FindTaskInbound, opts ...grpc.CallOption) (TaskService_FindTaskServiceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TaskService_serviceDesc.Streams[0], c.cc, "/messages.TaskService/FindTaskService", opts...)
	if err != nil {
		return nil, err
	}
	x := &taskServiceFindTaskServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TaskService_FindTaskServiceClient interface {
	Recv() (*TaskOutbound, error)
	grpc.ClientStream
}

type taskServiceFindTaskServiceClient struct {
	grpc.ClientStream
}

func (x *taskServiceFindTaskServiceClient) Recv() (*TaskOutbound, error) {
	m := new(TaskOutbound)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *taskServiceClient) CreateTaskService(ctx context.Context, in *CreateTaskInbound, opts ...grpc.CallOption) (*TaskOutbound, error) {
	out := new(TaskOutbound)
	err := grpc.Invoke(ctx, "/messages.TaskService/CreateTaskService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTaskService(ctx context.Context, in *UpdateTaskInbound, opts ...grpc.CallOption) (*TaskOutbound, error) {
	out := new(TaskOutbound)
	err := grpc.Invoke(ctx, "/messages.TaskService/UpdateTaskService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTaskService(ctx context.Context, in *GetTaskInbound, opts ...grpc.CallOption) (*TaskOutbound, error) {
	out := new(TaskOutbound)
	err := grpc.Invoke(ctx, "/messages.TaskService/DeleteTaskService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) FinishTaskService(ctx context.Context, in *GetTaskInbound, opts ...grpc.CallOption) (*TaskOutbound, error) {
	out := new(TaskOutbound)
	err := grpc.Invoke(ctx, "/messages.TaskService/FinishTaskService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceServer interface {
	GetTaskService(context.Context, *GetTaskInbound) (*TaskOutbound, error)
	FindTaskService(*FindTaskInbound, TaskService_FindTaskServiceServer) error
	CreateTaskService(context.Context, *CreateTaskInbound) (*TaskOutbound, error)
	UpdateTaskService(context.Context, *UpdateTaskInbound) (*TaskOutbound, error)
	DeleteTaskService(context.Context, *GetTaskInbound) (*TaskOutbound, error)
	FinishTaskService(context.Context, *GetTaskInbound) (*TaskOutbound, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_GetTaskService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.TaskService/GetTaskService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskService(ctx, req.(*GetTaskInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FindTaskService_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindTaskInbound)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TaskServiceServer).FindTaskService(m, &taskServiceFindTaskServiceServer{stream})
}

type TaskService_FindTaskServiceServer interface {
	Send(*TaskOutbound) error
	grpc.ServerStream
}

type taskServiceFindTaskServiceServer struct {
	grpc.ServerStream
}

func (x *taskServiceFindTaskServiceServer) Send(m *TaskOutbound) error {
	return x.ServerStream.SendMsg(m)
}

func _TaskService_CreateTaskService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTaskService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.TaskService/CreateTaskService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTaskService(ctx, req.(*CreateTaskInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTaskService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTaskService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.TaskService/UpdateTaskService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTaskService(ctx, req.(*UpdateTaskInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTaskService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTaskService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.TaskService/DeleteTaskService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTaskService(ctx, req.(*GetTaskInbound))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_FinishTaskService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInbound)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).FinishTaskService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messages.TaskService/FinishTaskService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).FinishTaskService(ctx, req.(*GetTaskInbound))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messages.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskService",
			Handler:    _TaskService_GetTaskService_Handler,
		},
		{
			MethodName: "CreateTaskService",
			Handler:    _TaskService_CreateTaskService_Handler,
		},
		{
			MethodName: "UpdateTaskService",
			Handler:    _TaskService_UpdateTaskService_Handler,
		},
		{
			MethodName: "DeleteTaskService",
			Handler:    _TaskService_DeleteTaskService_Handler,
		},
		{
			MethodName: "FinishTaskService",
			Handler:    _TaskService_FinishTaskService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindTaskService",
			Handler:       _TaskService_FindTaskService_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "soushin/spring5-kotlin-application/task/task.proto",
}

func init() { proto.RegisterFile("soushin/spring5-kotlin-application/task/task.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xc9, 0xe8, 0x06, 0xf3, 0xf8, 0x57, 0x0b, 0x6d, 0xa5, 0x94, 0x3f, 0xca, 0x89, 0x4d,
	0x9a, 0x33, 0x75, 0x20, 0xa1, 0xde, 0xe8, 0xd0, 0xa6, 0x72, 0x61, 0x0a, 0x1b, 0x07, 0x2e, 0xe0,
	0x26, 0xef, 0x3c, 0xab, 0xa9, 0x6d, 0xd9, 0xce, 0x26, 0x6e, 0x88, 0xaf, 0xc0, 0x47, 0xe3, 0x2b,
	0x70, 0xe5, 0x3b, 0x20, 0x3b, 0xcd, 0x92, 0x35, 0x94, 0x09, 0xb8, 0x54, 0x72, 0xfd, 0x3c, 0xbf,
	0x27, 0xef, 0xeb, 0x07, 0xf5, 0x8d, 0xcc, 0xcd, 0x29, 0x17, 0x91, 0x51, 0x9a, 0x0b, 0xf6, 0x62,
	0x7b, 0x22, 0x6d, 0xc6, 0xc5, 0x36, 0x55, 0x2a, 0xe3, 0x09, 0xb5, 0x5c, 0x8a, 0xc8, 0x52, 0x33,
	0xf1, 0x3f, 0x44, 0x69, 0x69, 0x25, 0xbe, 0x39, 0x05, 0x63, 0x28, 0x03, 0xd3, 0xed, 0x31, 0x29,
	0x59, 0x06, 0x11, 0x55, 0x3c, 0xa2, 0x42, 0x48, 0xeb, 0x0d, 0xa6, 0xd0, 0x75, 0x9f, 0xcc, 0x6e,
	0xfd, 0x69, 0x9c, 0x9f, 0x44, 0x96, 0x4f, 0xc1, 0x58, 0x3a, 0x55, 0x33, 0xc1, 0xe3, 0x79, 0xc1,
	0xb9, 0xa6, 0x4a, 0x81, 0x9e, 0x01, 0xc2, 0x4d, 0x74, 0xe7, 0x00, 0xec, 0x11, 0x35, 0x93, 0x91,
	0x18, 0xcb, 0x5c, 0xa4, 0x78, 0x03, 0xdd, 0x70, 0x1f, 0xf2, 0x91, 0xa7, 0x9d, 0xe0, 0x69, 0xf0,
	0xec, 0x76, 0xbc, 0xe2, 0x8e, 0xa3, 0x34, 0xdc, 0x43, 0x77, 0xf7, 0xb9, 0x48, 0xeb, 0xda, 0x1d,
	0xd4, 0x52, 0x94, 0x81, 0x17, 0xae, 0xf5, 0x7b, 0xa4, 0x08, 0x23, 0x65, 0x18, 0x39, 0x1e, 0x09,
	0xbb, 0xdb, 0x7f, 0x4f, 0xb3, 0x1c, 0x62, 0xaf, 0x0c, 0x37, 0x51, 0x7b, 0x4f, 0x03, 0xb5, 0x50,
	0xc7, 0xdc, 0x47, 0xcb, 0x96, 0xdb, 0xac, 0xe0, 0xac, 0xc6, 0xc5, 0x21, 0x1c, 0xa2, 0xf6, 0xb1,
	0x4a, 0xe7, 0xa4, 0x8b, 0xbe, 0xae, 0x62, 0x2c, 0xd5, 0x19, 0x3f, 0x03, 0x74, 0xcb, 0xd9, 0xdf,
	0xe6, 0xf6, 0x5f, 0xfc, 0x78, 0x80, 0xd0, 0x09, 0x17, 0xdc, 0x9c, 0x42, 0xfa, 0xca, 0x76, 0xae,
	0xfb, 0x31, 0xbb, 0x8d, 0x31, 0x8f, 0xca, 0xa5, 0xc7, 0x35, 0x35, 0x7e, 0x89, 0x56, 0x13, 0x3f,
	0xaa, 0xb3, 0xb6, 0xae, 0xb4, 0x56, 0x62, 0xe7, 0xcc, 0xfd, 0xe4, 0xce, 0xb9, 0x7c, 0xb5, 0xf3,
	0x42, 0xdc, 0xff, 0xd2, 0x42, 0x6b, 0x6e, 0xde, 0x77, 0xa0, 0xcf, 0x78, 0x02, 0xf8, 0xd3, 0xc5,
	0xf3, 0x96, 0xff, 0x74, 0x48, 0x59, 0x2d, 0x72, 0xf9, 0xe1, 0xbb, 0xeb, 0xd5, 0x4d, 0x7d, 0x65,
	0x61, 0xef, 0xeb, 0xf7, 0x1f, 0xdf, 0x96, 0xd6, 0xc3, 0x76, 0xc4, 0xb4, 0x4a, 0x18, 0xb5, 0x70,
	0x4e, 0x3f, 0xfb, 0xb2, 0x0e, 0x82, 0x2d, 0x0c, 0x55, 0x2b, 0xca, 0x88, 0x07, 0x15, 0x68, 0xae,
	0x30, 0x0b, 0x33, 0x1e, 0xf9, 0x8c, 0x8d, 0x10, 0x37, 0x32, 0xcc, 0x20, 0xd8, 0xda, 0x09, 0xf0,
	0x9b, 0x7a, 0x6f, 0xca, 0xa0, 0x87, 0x15, 0xad, 0x51, 0xaa, 0x85, 0x51, 0xd7, 0x1c, 0xab, 0x2a,
	0xd6, 0x6f, 0x58, 0x8d, 0xd6, 0xfd, 0x81, 0x75, 0x80, 0xda, 0xaf, 0x21, 0x83, 0xcb, 0xac, 0xbf,
	0xdf, 0xb1, 0x07, 0xed, 0xfb, 0xee, 0xfc, 0x27, 0x68, 0xf8, 0x1c, 0x75, 0xa8, 0x52, 0xc4, 0xed,
	0x91, 0x18, 0xd0, 0x67, 0xa0, 0x09, 0x03, 0x41, 0xdc, 0x2e, 0x87, 0xf7, 0x6a, 0xf0, 0x43, 0x57,
	0xa4, 0xc3, 0xe0, 0x43, 0xcb, 0xdd, 0x8c, 0x57, 0x7c, 0xaf, 0x76, 0x7f, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x09, 0xf6, 0x4c, 0x85, 0xad, 0x04, 0x00, 0x00,
}
